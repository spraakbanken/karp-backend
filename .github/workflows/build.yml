name: Build

on:
  push:
    branches:
      - "*"
    tags-ignore:
      - v*
  pull_request:
    branches:
      - "*"

env:
  POETRY_VERSION: 1.3.1
  JUST_VERSION: "1.13.0"

jobs:
  checks:
    name: ${{ matrix.task.name }} py-${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
        os: [ubuntu-latest]
        task:
          - name: Lint code
            run: just lint
            allow_failure: false
          - name: Lint code 'karp-lex-core'
            run: poetry run just karp-lex-core/lint
            allow_failure: false
          - name: Typecheck
            run: just type-check
            allow_failure: true
          - name: Typecheck 'karp-lex-core'
            run: poetry run just karp-lex-core/type-check
            allow_failure: false
          - name: Unit tests
            run: just unit-tests
            allow_failure: false
        # include:
        #   - task.allow_failure: false
        #   - task.allow_failure: true
        #     python-version: "3.11-dev"
        # - name: Lint w bandit
        #   run: make lint-security-issues
        #   allow_failure: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Load cached $HOME/.local
      #   uses: actions/cache@v3.1.6
      #   with:
      #     path: ~/.local
      #     key: dotlocal-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.3
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: just install-ci

      - name: Setup up environment
        run: cp -v .env.ci .env

      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}
        continue-on-error: ${{ matrix.task.allow_failure }}
        env:
          DB_DRIVER: sqlite

  tests:
    name: ${{ matrix.task.name }} py-${{ matrix.python-version }} es-${{ matrix.es.version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    services:
      mariadb:
        image: mariadb:10.3
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: testing
          MYSQL_DATABASE: karp
          MYSQL_PASSWORD: testing
          MYSQL_USER: karp
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
        es:
          - use: false
            version: NO
          - use: true
            version: 6.8.23
        os: [ubuntu-latest]
        task:
          - name: Integration tests
            run: just integration-tests-w-coverage
            allow_failure: false
          - name: End-to-end tests
            run: just e2e-tests-w-coverage
            allow_failure: false
        # include:
        #   - task.allow_failure: true
        #     python-version: "3.11-dev"
        exclude:
          - es:
              use: false
            task:
              name: End-to-end tests

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Load cached $HOME/.local
      #   uses: actions/cache@v3.1.6
      #   with:
      #     path: ~/.local
      #     key: dotlocal-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.3
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: just install-ci

      - name: Setup up environment
        run: cp -v .env.ci .env

      - name: Install Elasticsearch 6
        if: startsWith( matrix.es.version, '6')
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es.version }}.tar.gz
          tar -xzf elasticsearch-${{ matrix.es.version }}.tar.gz
          ./elasticsearch-${{ matrix.es.version }}/bin/elasticsearch-plugin install analysis-icu
          echo "TEST_ELASTICSEARCH_ENABLED=True" >> .env
          echo "TEST_ES_HOME=`realpath elasticsearch-${{ matrix.es.version }}`" >> .env
          echo "SEARCH_CONTEXT=es6_search_service" >> .env
          cat .env
          # make install-dev-elasticsearch6
          # pip install -e .[elasticsearch6]

      - name: Install Elasticsearch 7
        if: startsWith( matrix.es.version, '7')
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es.version }}-linux-x86_64.tar.gz
          tar -xzf elasticsearch-${{ matrix.es.version }}-linux-x86_64.tar.gz
          echo "TEST_ELASTICSEARCH_ENABLED=True" >> .env
          echo "TEST_ES_HOME=`realpath elasticsearch-${{ matrix.es.version }}`" >> .env
          cat .env
          pip install -e .[elasticsearch7]
      - name: List tree
        run: tree .
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}
        continue-on-error: ${{ matrix.task.allow_failure }}
        env:
          DB_TEST_DATABASE: karp
          DB_USER: karp
          DB_PASSWORD: testing
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ job.services.mariadb.ports['3306'] }}
