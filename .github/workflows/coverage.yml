name: Build

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

env:
  POETRY_VERSION: 1.2.0

jobs:
  coverage:
    name: Test coverage py-${{ matrix.python-version }} es-${{ matrix.es-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    services:
      mariadb:
        image: mariadb:10.3
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: testing
          MYSQL_DATABASE: karp
          MYSQL_PASSWORD: testing
          MYSQL_USER: karp
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        es-version: ["6.8.23"]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Load cached $HOME/.local
      #   uses: actions/cache@v3.1.6
      #   with:
      #     path: ~/.local
      #     key: dotlocal-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.3
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/coverage.yml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make install-dev

      - name: Setup up environment
        run: cp -v .env.ci .env

      - name: Install Elasticsearch 6
        if: startsWith( matrix.es-version, '6')
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es-version }}.tar.gz
          tar -xzf elasticsearch-${{ matrix.es-version }}.tar.gz
          ./elasticsearch-${{ matrix.es-version }}/bin/elasticsearch-plugin install analysis-icu
          echo "TEST_ELASTICSEARCH_ENABLED=True" >> .env
          echo "TEST_ES_HOME=`realpath elasticsearch-${{ matrix.es-version }}`" >> .env
          echo "SEARCH_CONTEXT=es6_search_service" >> .env
          cat .env
          # make install-dev-elasticsearch6
          # pip install -e .[elasticsearch6]

      - name: Install Elasticsearch 7
        if: startsWith( matrix.es-version, '7')
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es-version }}-linux-x86_64.tar.gz
          tar -xzf elasticsearch-${{ matrix.es-version }}-linux-x86_64.tar.gz
          echo "TEST_ELASTICSEARCH_ENABLED=True" >> .env
          echo "TEST_ES_HOME=`realpath elasticsearch-${{ matrix.es-version }}`" >> .env
          cat .env
          pip install -e .[elasticsearch7]
      - name: Run all tests for coverage report
        run: make all-tests-w-coverage
        env:
          DB_TEST_DATABASE: karp
          DB_USER: karp
          DB_PASSWORD: testing
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ job.services.mariadb.ports[3306] }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false
          verbose: true
