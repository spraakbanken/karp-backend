name: Build & Publish

on:
  push:
    tags:
      - v*

env:
  POETRY_VERSION: "1.2.0"
  PYTHON_VERSION: "3.10"
jobs:
  lint:
    runs-on: ${{ matrix.os }}
    name: Lint with pylint (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.3
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: make install-dev

      - name: Setup up environment
        run: cp -v .env.ci .env

      - name: Lint with pylint
        run: make lint-no-fail

  test:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.task.name }} py-${{ matrix.python-version }} es-${{ matrix.es-version }} (${{ matrix.os }})
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
        es-version: ["6.8.23"]
        task:
          - name: Run tests
            run: make all-tests-w-coverage

    services:
      mariadb:
        image: mariadb:10.3
        ports:
          - 3306
        env:
          MYSQL_ROOT_PASSWORD: testing
          MYSQL_DATABASE: karp
          MYSQL_PASSWORD: testing
          MYSQL_USER: karp
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1.3
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: make install-dev

      - name: Setup up environment
        run: cp -v .env.ci .env
      - name: Install Elasticsearch 6
        if: startsWith( matrix.es-version, '6')
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es-version }}.tar.gz
          tar -xzf elasticsearch-${{ matrix.es-version }}.tar.gz
          ./elasticsearch-${{ matrix.es-version }}/bin/elasticsearch-plugin install analysis-icu
          echo "TEST_ELASTICSEARCH_ENABLED=True" >> .env
          echo "TEST_ES_HOME=`realpath elasticsearch-${{ matrix.es-version }}`" >> .env
          echo "SEARCH_CONTEXT=es6_search_service" >> .env
          cat .env
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}
        env:
          DB_TEST_DATABASE: karp
          DB_USER: karp
          DB_PASSWORD: testing
          DB_HOST: 127.0.0.1
          DB_PORT: ${{ job.services.mariadb.ports['3306'] }}

  publish:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: install poetry
        run: pip install poetry
      - name: Build distribution
        run: |
          poetry build
          echo "github.ref = ${{ github.ref }}"
      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@master
        if: github.repository == 'spraakbanken/karp-backend' && !startsWith(github.ref, 'refs/tags/')
        continue-on-error: true
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_PASSWORD }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        if: github.repository == 'spraakbanken/karp-backend' && startsWith(github.ref, 'refs/tags/')
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
