@@grammar::KarpQuery

start
    =
    expression $
    ;

expression
    =
    | logical_expression
    | query_expression
    | sub_query
    ;

query_expression
    =
    | unary_query_expression
    | binary_query_expression
    ;

# exists and missing take identifiers but freetext takes value
unary_query_expression
    =
    | field_query
    | freetext
    ;

field_query::FieldQuery =
    op:('exists' | 'missing') '|' field:identifier
    ;

# all these take an identifier, then value
binary_query_expression::BinaryQueryExpression
    =
    | text_arg_expr
    | any_arg_expr
    ;

text_arg_expr
    =
    op:text_value_op '|' field:identifier '|' arg:string_value
    ;

text_value_op
    =
    | 'contains'
    | 'endswith'
    | 'regexp'
    | 'startswith'
    ;

any_arg_expr
    =
    op:any_arg_op '|' field:identifier '|' arg:any_value
    ;

any_arg_op
    =
    | 'equals'
    | 'gt'
    | 'gte'
    | 'lt'
    | 'lte'
    ;

logical_expression
    =
    | and
    | or
    | not
    ;

sub_query::SubQuery
    =
    field:identifier '(' exp:expression ')'
    ;

and::And
    =
    'and' '(' @:'||'.{expression}* ')'
    ;


freetext::Freetext
    =
    'freetext' '|' arg:string_value
    ;

not::Not
    =
    'not' '(' @:'||'.{expression}+ ')'
    ;

or::Or
    =
    'or' '(' @:'||'.{expression}* ')'
    ;

any_value
    =
    | integer_value
    | string_value
    ;

string_value::StringValue =
    | unquoted_string_value
    | quoted_string_value
    ;

unquoted_string_value = @: /[^|)("]+/ ;

# any character should be allowed in strings, but " must be escaped
quoted_string_value::QuotedStringValue
    =
    '"' @: { /(?s)\s+/ | '\\"' | /[^"]/  } '"'
    ;

integer_value::int
    =
    /\d+$/
    ;

# for simplicity, add |,(,) as not allowed here, even though it shouldn't matter. should be possible to name  field "myfield|"
identifier::Identifier = /[^|)(]+/ ;
