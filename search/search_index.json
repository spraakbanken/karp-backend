{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"development/","title":"Development","text":"<p>See also: System overview</p> <p><code>karp</code> is implemented according to Clean Architecture/Domain-Driven-Design.</p> <p>The repo defines two apps:</p> <ul> <li><code>karp.karp_v6_api</code>: the backend</li> <li><code>karp.cliapp</code>: the <code>karp-cli</code> tool to manage the backend</li> </ul> <p>The ambition is that the apps only depends on <code>karp.main</code>, <code>karp.lex</code>, <code>karp.search</code> och for the karp_v6_api also <code>karp.auth</code> and that <code>karp.main</code> holds the dependency injection stuff that binds implementations from <code>karp.lex_infrastructure</code>, <code>karp.auth_infrastructure</code> and <code>karp.search_infrastructure</code>.</p> <p>This means that <code>karp.auth</code>, <code>karp.lex</code> and <code>karp.search</code> defines the <code>domain</code>, interfaces for needed functionality and the <code>buisness logic</code> of the apps.</p>"},{"location":"development/#references","title":"References","text":"<ul> <li>Clean Architecture</li> <li>Domain-Driven Design</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<ul> <li>Add resource</li> <li>Create a resource config</li> <li>Readd a resource</li> </ul>"},{"location":"tutorials/add-resource/","title":"Add a resource to karp","text":"<p>In this tutorial we are gonna add the resource <code>Lex Lex</code> to Karp.</p> <p>All commands are supposed to run after <code>poetry shell</code> (that is, in an activated virtual environment).</p> <ol> <li>Create a resource config</li> <li>In this example we have saved the config in <code>path/to/parolelexplus.json</code></li> <li>Add an entry repository: <code>karp-cli entry-repo create path/to/parolelexplus.json</code></li> <li>Add a resource: <code>karp-cli resource create path/to/parolelexplus.json</code></li> <li>This command will list currently non-deleted entry-repos along with numbers, choose the highest number for your resource</li> <li>In our running example, choose: <code>parolelexplus</code></li> <li>Publish the resource: <code>karp-cli resource publish &lt;resource_id&gt;</code></li> <li>In our example: <code>karp-cli resource publish parolelexplus</code></li> <li>Before adding entries, we can dry-run and validate them: <code>karp-cli entries validate --resource_id &lt;resource_id&gt; &lt;path/to/entries&gt;</code></li> <li>In our example: <code>karp-cli entries validate --resource_id parolelexplus path/to/parolelexplus.jsonl</code></li> <li>Adding entries, can be done in 2 ways, both methods can read <code>json</code>, <code>jsonl</code>, <code>json.gz</code> or <code>jsonl.gz</code> files:</li> <li>Add all in one go: <code>karp-cli entries add &lt;resource_id&gt; &lt;path/to/entries&gt;</code><ul> <li>In our example: <code>karp-cli entries add parolelexplus path/to/parolelexplus.jsonl</code></li> </ul> </li> <li>Add all but in chunks: <code>karp-cli entries add &lt;resource_id&gt; &lt;path/to/entries&gt; --chunked --chunk-size &lt;number (default: 1000)&gt;</code><ul> <li>This version works by addind <code>&lt;chunk-size&gt;</code> entries to the database and indexes them in the search-service (e.g. ElasticSearch).</li> <li>The pro with this method is that not all entries are held in memory.</li> <li>The con is that if a later chunk fails, all previously added chunks are stored, that is the resource is partially added. Manual intervention can be needed.</li> <li>In our example: <code>karp-cli entries add parolelexplus path/to/parolelexplus.jsonl --chunked --chunk-size 10000</code></li> </ul> </li> <li>NOTE If are going to add a large resource this can take several hours, please use <code>nohup</code> for better experience.<ul> <li>For instance <code>nohup karp-cli entries add &lt;resource_id&gt; &lt;path/to/entries&gt; --chunked &gt; stdout.log 2&gt; stderr.log.jsonl &amp;</code>.</li> <li>Karp print logs to stderr in jsonl format.</li> <li>In our example: <code>nohup karp-cli entries add parolelexplus path/to/parolelexplus.jsonl --chunked &gt; stdout.log 2&gt; stderr.log.jsonl &amp;</code></li> </ul> </li> </ol>"},{"location":"tutorials/create-resource-config/","title":"Create a Resource Config","text":"<p>In this tutorial we are going to create a resource config for the resource <code>parolelexplus</code>.</p> <p>Some entries in this resource looks like this:</p> <pre><code>{\"wordform\": \"skyddsf\\u00f6reskrift\", \"partOfSpeech\": \"nn\", \"valency\": \"(ATTR) [nn] (ATTR)\", \"paroleID\": \"US14440_15998\"}\n{\"wordform\": \"arrangerar\", \"saldo\": [\"arrangera..1\"], \"partOfSpeech\": \"vb\", \"valency\": \"S_NP_A [vb] DO_NP_x (PO_PP_f\\u00f6r_y)\", \"paroleID\": \"US675_727\"}\n{\"wordform\": \"konstruktion\", \"saldo\": [\"konstruktion..1\"], \"partOfSpeech\": \"nn\", \"valency\": \"[nn] (PP_av_NP_x)\", \"paroleID\": \"US8133_8951\"}\n{\"wordform\": \"kort\", \"saldo\": [\"kort..1\"], \"partOfSpeech\": \"av\", \"valency\": \"SUPR_[av]\", \"paroleID\": \"US8254_9087\"}\n{\"wordform\": \"avmagrad\", \"saldo\": [\"avmagrad..1\"], \"partOfSpeech\": \"av\", \"valency\": \"[av] NP\", \"paroleID\": \"US909_978\"}\n{\"wordform\": \"samlar\", \"saldo\": [\"samla..1\", \"samla..2\"], \"partOfSpeech\": \"vb\", \"valency\": \"S_NP_A [vb] DO_NP_x\", \"paroleID\": \"US13500_14968\"}\n{\"wordform\": \"myser\", \"saldo\": [\"mysa..1\"], \"partOfSpeech\": \"vb\", \"valency\": \"S_NP_A [vb] (PO_PP_mot_B)\", \"paroleID\": \"US10239_11340\"}\n{\"wordform\": \"s\\u00e4krar\", \"saldo\": [\"s\\u00e4kra..1\"], \"partOfSpeech\": \"vb\", \"valency\": \"S_NP_A/x [vb] DO_NP_y\", \"paroleID\": \"US16362_18148\"}\n{\"wordform\": \"f\\u00f6renlig\", \"saldo\": [\"f\\u00f6renlig..1\"], \"partOfSpeech\": \"av\", \"valency\": \"[av] PP_med_NP_x\", \"paroleID\": \"US4828_5353\"}\n{\"wordform\": \"hastighet\", \"saldo\": [\"hastighet..1\"], \"partOfSpeech\": \"nn\", \"valency\": \"(ATTR) [nn] (ATTR)\", \"paroleID\": \"US6093_6719\"}\n</code></pre>"},{"location":"tutorials/create-resource-config/#resource_id-required","title":"<code>resource_id</code> [required]","text":"<p>We need to define the <code>resource_id</code> for our resource, this will be used when we call the api. The <code>resource_id</code> can't contain whitespace and should preferrable only contain lowercase letters.</p> <pre><code>{\n  \"resource_id\": \"parolelexplus\"\n}\n</code></pre>"},{"location":"tutorials/create-resource-config/#resource_name-optional","title":"<code>resource_name</code> [optional]","text":"<p>We could also define the <code>resource_name</code> for our resource, if not the <code>resource_id</code> will be used.</p> <pre><code>{\n  \"resource_id\": \"parolelexplus\",\n  \"resource_name\": \"parolelexplus\"\n}\n</code></pre>"},{"location":"tutorials/create-resource-config/#fields-required","title":"<code>fields</code> [required]","text":"<p>Here we define the fields that the entries in the resource will have. The fields are defined by <code>\"&lt;field_name&gt;\": {\"type\": \"&lt;field_type&gt;\"}</code> where field_type can be any of:</p> field_type python_type comment <code>string</code> <code>str</code> smaller kind of string <code>long_string</code> <code>str</code> larger kind of string, exact limit? <code>boolean</code> <code>bool</code> <code>integer</code> <code>int</code> <code>number</code> <code>float</code> <code>object</code> <code>dict</code> requires the field <code>fields</code> that define fields <p>So we begin with adding config for the <code>paroleID</code> field of type <code>string</code>:</p> <pre><code>{\n  \"resource_id\": \"parolelexplus\",\n  \"resource_name\": \"parolelexplus\",\n  \"fields\": {\n    \"paroleID\": { \"type\": \"string\", \"required\": true }\n  }\n}\n</code></pre> <p>After we can handle all <code>string</code> fields:</p> <pre><code>{\n  \"resource_id\": \"parolelexplus\",\n  \"resource_name\": \"parolelexplus\",\n  \"fields\": {\n    \"paroleID\": { \"type\": \"string\", \"required\": true },\n    \"wordform\": { \"type\": \"string\", \"required\": true },\n    \"partOfSpeech\": { \"type\": \"string\" },\n    \"valency\": { \"type\": \"string\" }\n  }\n}\n</code></pre> <p>Currently <code>array</code>:s are specified by defining the type and and then adding the field <code>collection</code> as in:</p> <pre><code>{\n  \"resource_id\": \"parolelexplus\",\n  \"resource_name\": \"parolelexplus\",\n  \"fields\": {\n    \"paroleID\": { \"type\": \"string\", \"required\": true },\n    \"wordform\": { \"type\": \"string\", \"required\": true },\n    \"partOfSpeech\": { \"type\": \"string\" },\n    \"valency\": { \"type\": \"string\" },\n    \"saldo\": { \"type\": \"string\", \"collection\": true }\n  }\n}\n</code></pre>"},{"location":"tutorials/create-resource-config/#id-required","title":"<code>id</code> [required]","text":"<p>Currently not used, but requried to set.</p> <pre><code>{\n  \"resource_id\": \"parolelexplus\",\n  \"resource_name\": \"parolelexplus\",\n  \"fields\": {\n    \"paroleID\": { \"type\": \"string\", \"required\": true },\n    \"wordform\": { \"type\": \"string\", \"required\": true },\n    \"partOfSpeech\": { \"type\": \"string\" },\n    \"valency\": { \"type\": \"string\" },\n    \"saldo\": { \"type\": \"string\", \"collection\": true }\n  },\n  \"id\": \"paroleID\"\n}\n</code></pre>"},{"location":"tutorials/create-resource-config/#sort-required","title":"<code>sort</code> [required]","text":"<p>Specifies by which field the entry shall be sorted by.</p> <pre><code>{\n  \"resource_id\": \"parolelexplus\",\n  \"resource_name\": \"parolelexplus\",\n  \"fields\": {\n    \"paroleID\": { \"type\": \"string\", \"required\": true },\n    \"wordform\": { \"type\": \"string\", \"required\": true },\n    \"partOfSpeech\": { \"type\": \"string\" },\n    \"valency\": { \"type\": \"string\" },\n    \"saldo\": { \"type\": \"string\", \"collection\": true }\n  },\n  \"id\": \"paroleID\",\n  \"sort\": \"wordform\"\n}\n</code></pre>"},{"location":"tutorials/readd-resource/","title":"Add a resource to karp","text":"<p>In this tutorial we are gonna add the resource <code>Lex Lex</code> to Karp.</p> <p>All commands are supposed to run after <code>poetry shell</code> (that in an activated virtual environment).</p> <ol> <li>Create a resource config</li> <li>Add an entry repository: <code>karp-cli entry-repo create &lt;path&gt;</code></li> <li>Add a resource: <code>karp-cli resource create &lt;path&gt;</code>     Same path as above, use the latest number in list.</li> <li>Add entries </li> </ol>"}]}